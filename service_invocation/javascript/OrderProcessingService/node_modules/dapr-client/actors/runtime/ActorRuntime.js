"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../..");
var ActorId_1 = __importDefault(require("../ActorId"));
var ActorManager_1 = __importDefault(require("./ActorManager"));
var ActorRuntimeConfig_1 = __importDefault(require("./ActorRuntimeConfig"));
/**
 * Creates instances of "Actor" and activates and deactivates "Actor"
 */
var ActorRuntime = /** @class */ (function () {
    // @todo: we need to make sure race condition cannot happen when accessing the active actors
    // NodeJS has an event loop (main thread -> runs JS code) and a worker pool (threadpool -> automatically created for offloading work through libuv) threads
    // we can have a new thread through the worker_thread module 
    // https://medium.com/@mohllal/node-js-multithreading-a5cd74958a67
    // 
    //
    // Python: asyncio.lock -> implements a mutex lock for asyncio tasks to guarantee exclusive access to a shared resource
    // Java: Collections.synchronizedMap -> is a thread-saf synchronized map to guarantee serial access
    // NodeJS: https://nodejs.org/api/worker_threads.html
    // actorManagersLock
    function ActorRuntime(daprClient) {
        this.actorRuntimeConfig = new ActorRuntimeConfig_1.default();
        this.daprClient = daprClient;
        this.actorManagers = new Map();
    }
    ActorRuntime.getInstanceByDaprClient = function (daprClient) {
        if (!ActorRuntime.instance) {
            ActorRuntime.instance = new ActorRuntime(daprClient);
        }
        return ActorRuntime.instance;
    };
    ActorRuntime.getInstance = function (client) {
        if (!ActorRuntime.instance) {
            var daprClient = __1.DaprClient.create(client);
            ActorRuntime.instance = new ActorRuntime(daprClient);
        }
        return ActorRuntime.instance;
    };
    ActorRuntime.prototype.registerActor = function (actorCls) {
        // Create an ActorManager if it hasn't been registered yet
        if (!this.actorManagers.has(actorCls.name)) {
            this.actorManagers.set(actorCls.name, new ActorManager_1.default(actorCls, this.daprClient));
        }
    };
    ActorRuntime.prototype.getRegisteredActorTypes = function () {
        return Array.from(this.actorManagers.keys());
    };
    ActorRuntime.prototype.getActorRuntimeConfig = function () {
        return this.actorRuntimeConfig;
    };
    ActorRuntime.prototype.setActorRuntimeConfig = function (config) {
        this.actorRuntimeConfig = config;
    };
    ActorRuntime.prototype.clearActorManagers = function () {
        this.actorManagers = new Map();
    };
    ActorRuntime.prototype.getActorManager = function (actorTypeName) {
        var actorManager = this.actorManagers.get(actorTypeName);
        if (!actorManager) {
            throw new Error("ACTOR_TYPE_" + actorTypeName + "_NOT_REGISTERED");
        }
        // We need to cast to ActorManager<T> since Map actorManagers
        // is initialized with ActorManager<any> since we don't know the type there
        return actorManager;
    };
    /**
     * Invokes a method on the actor from the runtime
     * This method will open the manager for the actor type and get the matching object
     * It will then invoke the method on this object
     *
     * @param actorTypeName
     * @param actorId
     * @param actorMethodName
     * @param payload
     * @returns
     */
    ActorRuntime.prototype.invoke = function (actorTypeName, actorId, actorMethodName, requestBody) {
        return __awaiter(this, void 0, void 0, function () {
            var actorIdObj, manager;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        actorIdObj = new ActorId_1.default(actorId);
                        manager = this.getActorManager(actorTypeName);
                        return [4 /*yield*/, manager.invoke(actorIdObj, actorMethodName, requestBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Fires a reminder for the actor
     *
     * @param actorTypeName the name fo the actor type
     * @param actorId the actor id
     * @param name the name of the reminder
     * @param requestBody the body passed to the reminder callback
     */
    ActorRuntime.prototype.fireReminder = function (actorTypeName, actorId, name, requestBody) {
        return __awaiter(this, void 0, void 0, function () {
            var actorIdObj, manager;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        actorIdObj = new ActorId_1.default(actorId);
                        manager = this.getActorManager(actorTypeName);
                        return [4 /*yield*/, manager.fireReminder(actorIdObj, name, requestBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Fires a timer for the actor
     *
     * @param actorTypeName the name fo the actor type
     * @param actorId the actor id
     * @param name the name of the timer
     * @param requestBody the body passed to the timer callback
     */
    ActorRuntime.prototype.fireTimer = function (actorTypeName, actorId, name, requestBody) {
        return __awaiter(this, void 0, void 0, function () {
            var actorIdObj, manager;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        actorIdObj = new ActorId_1.default(actorId);
                        manager = this.getActorManager(actorTypeName);
                        return [4 /*yield*/, manager.fireTimer(actorIdObj, name, requestBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ActorRuntime.prototype.deactivate = function (actorTypeName, actorId) {
        return __awaiter(this, void 0, void 0, function () {
            var actorIdObj, manager;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        actorIdObj = new ActorId_1.default(actorId);
                        manager = this.getActorManager(actorTypeName);
                        return [4 /*yield*/, manager.deactivateActor(actorIdObj)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ActorRuntime;
}());
exports.default = ActorRuntime;
