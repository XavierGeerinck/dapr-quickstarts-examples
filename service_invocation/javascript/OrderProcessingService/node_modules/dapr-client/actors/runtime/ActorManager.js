"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ActorReminderData_1 = __importDefault(require("./ActorReminderData"));
var ActorTimerData_1 = __importDefault(require("./ActorTimerData"));
var BufferSerializer_1 = __importDefault(require("./BufferSerializer"));
/**
 * The Actor Manager manages actor objects of a specific actor type
 */
var REMINDER_METHOD_NAME = 'receiveReminder'; // the callback method name for the reminder
var ActorManager = /** @class */ (function () {
    // dispatcher: ActorMethodDispatcher<T>;
    // timerMethodContext: any;
    // reminderMethodContext: any;
    function ActorManager(actorCls, daprClient) {
        this.serializer = new BufferSerializer_1.default();
        this.daprClient = daprClient;
        this.actorCls = actorCls;
        this.actors = new Map();
        // @todo: we need to make sure race condition cannot happen when accessing the active actors
        // NodeJS has an event loop (main thread -> runs JS code) and a worker pool (threadpool -> automatically created for offloading work through libuv) threads
        // we can have a new thread through the worker_thread module 
        // https://medium.com/@mohllal/node-js-multithreading-a5cd74958a67
        // 
        //
        // Python: asyncio.lock -> implements a mutex lock for asyncio tasks to guarantee exclusive access to a shared resource
        // Java: Collections.synchronizedMap -> is a thread-saf synchronized map to guarantee serial access
        // NodeJS: https://nodejs.org/api/worker_threads.html
        // this.activeActorsLock = null; // Unknown in JS, states: asyncio.lock() in python @todo: we need a Mutex locking function
        // this.dispatcher = new ActorMethodDispatcher(this.runtimeCtx.getActorTypeInformation());
        // this.timerMethodContext = ActorMethodContext.createForTimer(TIMER_METHOD_NAME);
        // this.reminderMethodContext = ActorMethodContext.createForReminder(REMINDER_METHOD_NAME);
    }
    ActorManager.prototype.createActor = function (actorId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new this.actorCls(this.daprClient, actorId)];
            });
        });
    };
    ActorManager.prototype.activateActor = function (actorId) {
        return __awaiter(this, void 0, void 0, function () {
            var actor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createActor(actorId)];
                    case 1:
                        actor = _a.sent();
                        // We activate the actor by calling the onActivateInternal method on it
                        // this will create its state object
                        return [4 /*yield*/, actor.onActivateInternal()];
                    case 2:
                        // We activate the actor by calling the onActivateInternal method on it
                        // this will create its state object
                        _a.sent();
                        this.actors.set(actorId.getId(), actor);
                        return [2 /*return*/];
                }
            });
        });
    };
    ActorManager.prototype.deactivateActor = function (actorId) {
        return __awaiter(this, void 0, void 0, function () {
            var actor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.actors.has(actorId.getId())) {
                            throw new Error(JSON.stringify({
                                error: 'ACTOR_NOT_ACTIVATED',
                                errorMsg: "The actor " + actorId.getId() + " was not activated"
                            }));
                        }
                        return [4 /*yield*/, this.getActiveActor(actorId)];
                    case 1:
                        actor = _a.sent();
                        return [4 /*yield*/, actor.onDeactivateInternal()];
                    case 2:
                        _a.sent();
                        this.actors.delete(actorId.getId());
                        return [2 /*return*/];
                }
            });
        });
    };
    ActorManager.prototype.getActiveActor = function (actorId) {
        return __awaiter(this, void 0, void 0, function () {
            var actor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.actors.has(actorId.getId())) return [3 /*break*/, 2];
                        // console.log(`Doesn't have active actor (${actorId.getId()}), activating it`);
                        return [4 /*yield*/, this.activateActor(actorId)];
                    case 1:
                        // console.log(`Doesn't have active actor (${actorId.getId()}), activating it`);
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        actor = this.actors.get(actorId.getId());
                        if (!actor) {
                            throw new Error(actorId.getId() + " was not activated correctly");
                        }
                        return [2 /*return*/, actor];
                }
            });
        });
    };
    /**
     * Execute the given method with requestBody on the given Actor
     *
     * @param actorId
     * @param actorMethodName
     * @param requestBody
     * @param actorMethodContext
     * @returns
     */
    ActorManager.prototype.invoke = function (actorId, actorMethodName, requestBody) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBodyDeserialized;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestBodyDeserialized = this.serializer.deserialize(requestBody || Buffer.from(""));
                        return [4 /*yield*/, this.callActorMethod(actorId, actorMethodName, requestBodyDeserialized)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ActorManager.prototype.fireReminder = function (actorId, reminderName, requestBody) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBodyDeserialized, reminderData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestBodyDeserialized = this.serializer.deserialize(requestBody || Buffer.from(""));
                        reminderData = ActorReminderData_1.default.fromObject(reminderName, requestBodyDeserialized);
                        return [4 /*yield*/, this.callActorMethod(actorId, REMINDER_METHOD_NAME, reminderData.state)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ActorManager.prototype.fireTimer = function (actorId, timerName, requestBody) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBodyDeserialized, timerData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestBodyDeserialized = this.serializer.deserialize(requestBody || Buffer.from(""));
                        timerData = ActorTimerData_1.default.fromObject(timerName, requestBodyDeserialized);
                        return [4 /*yield*/, this.callActorMethod(actorId, timerData.callback, timerData.state)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ActorManager.prototype.callActorMethod = function (actorId, actorMethodName) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var actorObject, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getActiveActor(actorId)];
                    case 1:
                        actorObject = _a.sent();
                        // Check if the actor method exists? Skip type-checking as it's the power of Javascript
                        // @ts-ignore
                        if (typeof actorObject[actorMethodName] !== "function") {
                            throw new Error(JSON.stringify({
                                error: 'ACTOR_METHOD_DOES_NOT_EXIST',
                                errorMsg: "The actor method '" + actorMethodName + "' does not exist on " + this.actorCls.name
                            }));
                        }
                        // @todo: actor reentrancy
                        // Call the actor method, Skip type-checking as it's the power of Javascript
                        return [4 /*yield*/, actorObject.onActorMethodPreInternal()];
                    case 2:
                        // @todo: actor reentrancy
                        // Call the actor method, Skip type-checking as it's the power of Javascript
                        _a.sent();
                        return [4 /*yield*/, actorObject[actorMethodName].apply(actorObject, args)];
                    case 3:
                        res = _a.sent();
                        return [4 /*yield*/, actorObject.onActorMethodPostInternal()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return ActorManager;
}());
exports.default = ActorManager;
