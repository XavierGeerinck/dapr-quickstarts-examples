"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ActorStateChange_1 = __importDefault(require("./ActorStateChange"));
var StateChangeKind_1 = __importDefault(require("./StateChangeKind"));
var StateMetadata_1 = __importDefault(require("./StateMetadata"));
var ActorStateManager = /** @class */ (function () {
    function ActorStateManager(actor) {
        this.actor = actor;
        this.defaultStateChangeTracker = new Map();
    }
    ActorStateManager.prototype.getContextualStateTracker = function () {
        // @todo: reentrancy and context tracking
        // https://github.com/dapr/python-sdk/blob/0f0b6f6a1cf45d2ac0c519b48fc868898d81124e/dapr/actor/runtime/state_manager.py#L236
        return this.defaultStateChangeTracker;
    };
    ActorStateManager.prototype.addState = function (stateName, value) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryAddState(stateName, value)];
                    case 1:
                        res = _a.sent();
                        if (!res) {
                            throw new Error("The actor state name " + stateName + " already exist");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ActorStateManager.prototype.tryAddState = function (stateName, value) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateMetadata, didExist;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        if (stateChangeTracker.has(stateName)) {
                            stateMetadata = stateChangeTracker.get(stateName);
                            if ((stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getChangeKind()) === StateChangeKind_1.default.REMOVE) {
                                stateChangeTracker.set(stateName, new StateMetadata_1.default(value, StateChangeKind_1.default.UPDATE));
                                return [2 /*return*/, true];
                            }
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.actor.getStateProvider().containsState(this.actor.getActorType(), this.actor.getId().getId(), stateName)];
                    case 1:
                        didExist = _a.sent();
                        if (!didExist) {
                            return [2 /*return*/, false];
                        }
                        stateChangeTracker.set(stateName, new StateMetadata_1.default(value, StateChangeKind_1.default.ADD));
                        return [2 /*return*/, true];
                }
            });
        });
    };
    ActorStateManager.prototype.getState = function (stateName) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, hasValue, value;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.tryGetState(stateName)];
                    case 1:
                        _a = _b.sent(), hasValue = _a[0], value = _a[1];
                        if (hasValue) {
                            return [2 /*return*/, value];
                        }
                        throw new Error("Actor state with name " + stateName + " was not found");
                }
            });
        });
    };
    ActorStateManager.prototype.tryGetState = function (stateName) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateMetadata, val, _a, hasValue, value;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        if (stateChangeTracker.has(stateName)) {
                            stateMetadata = stateChangeTracker.get(stateName);
                            if ((stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getChangeKind()) === StateChangeKind_1.default.REMOVE) {
                                return [2 /*return*/, [false, null]];
                            }
                            val = stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getValue();
                            return [2 /*return*/, [true, val !== undefined ? val : null]];
                        }
                        return [4 /*yield*/, this.actor.getStateProvider().tryLoadState(this.actor.getActorType(), this.actor.getId().getId(), stateName)];
                    case 1:
                        _a = _b.sent(), hasValue = _a[0], value = _a[1];
                        if (hasValue) {
                            stateChangeTracker.set(stateName, new StateMetadata_1.default(value, StateChangeKind_1.default.NONE));
                        }
                        return [2 /*return*/, [hasValue, value]];
                }
            });
        });
    };
    // SEE: https://github.com/dapr/python-sdk/blob/0f0b6f6a1cf45d2ac0c519b48fc868898d81124e/dapr/actor/runtime/state_manager.py#L236
    ActorStateManager.prototype.setState = function (stateName, value) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateMetadata, didExist;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        if (stateChangeTracker.has(stateName)) {
                            stateMetadata = stateChangeTracker.get(stateName);
                            if (!stateMetadata) {
                                return [2 /*return*/];
                            }
                            stateMetadata.setValue(value);
                            if (stateMetadata.getChangeKind() === StateChangeKind_1.default.NONE || stateMetadata.getChangeKind() === StateChangeKind_1.default.REMOVE) {
                                stateMetadata.setChangeKind(StateChangeKind_1.default.UPDATE);
                            }
                            stateChangeTracker.set(stateName, stateMetadata);
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.actor.getStateProvider().containsState(this.actor.getActorType(), this.actor.getId().getId(), stateName)];
                    case 1:
                        didExist = _a.sent();
                        if (didExist) {
                            stateChangeTracker.set(stateName, new StateMetadata_1.default(value, StateChangeKind_1.default.UPDATE));
                        }
                        else {
                            stateChangeTracker.set(stateName, new StateMetadata_1.default(value, StateChangeKind_1.default.ADD));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ActorStateManager.prototype.removeState = function (stateName) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryRemoveState(stateName)];
                    case 1:
                        res = _a.sent();
                        if (!res) {
                            throw new Error("The actor state with name " + stateName + " was not found");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ActorStateManager.prototype.tryRemoveState = function (stateName) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateMetadata, didExist;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        if (stateChangeTracker.has(stateName)) {
                            stateMetadata = stateChangeTracker.get(stateName);
                            if ((stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getChangeKind()) === StateChangeKind_1.default.REMOVE) {
                                return [2 /*return*/, false];
                            }
                            else if ((stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getChangeKind()) === StateChangeKind_1.default.ADD) {
                                stateChangeTracker.delete(stateName);
                                return [2 /*return*/, true];
                            }
                            stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.setChangeKind(StateChangeKind_1.default.REMOVE);
                            return [2 /*return*/, true];
                        }
                        return [4 /*yield*/, this.actor.getStateProvider().containsState(this.actor.getActorType(), this.actor.getId().getId(), stateName)];
                    case 1:
                        didExist = _a.sent();
                        if (didExist) {
                            stateChangeTracker.set(stateName, new StateMetadata_1.default(null, StateChangeKind_1.default.REMOVE));
                            return [2 /*return*/, true];
                        }
                        return [2 /*return*/, false];
                }
            });
        });
    };
    ActorStateManager.prototype.containsState = function (stateName) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateMetadata, doesContainState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        if (stateChangeTracker.has(stateName)) {
                            stateMetadata = stateChangeTracker.get(stateName);
                            return [2 /*return*/, (stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getChangeKind()) !== StateChangeKind_1.default.REMOVE];
                        }
                        return [4 /*yield*/, this.actor.getStateProvider().containsState(this.actor.getActorType(), this.actor.getId().getId(), stateName)];
                    case 1:
                        doesContainState = _a.sent();
                        return [2 /*return*/, doesContainState];
                }
            });
        });
    };
    ActorStateManager.prototype.getOrAddState = function (stateName, value) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, _a, hasValue, val, changeKind;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        return [4 /*yield*/, this.tryGetState(stateName)];
                    case 1:
                        _a = _b.sent(), hasValue = _a[0], val = _a[1];
                        if (hasValue) {
                            return [2 /*return*/, val];
                        }
                        return [4 /*yield*/, this.isStateMarkedForRemove(stateName)];
                    case 2:
                        changeKind = (_b.sent()) ? StateChangeKind_1.default.UPDATE : StateChangeKind_1.default.ADD;
                        stateChangeTracker.set(stateName, new StateMetadata_1.default(value, changeKind));
                        return [2 /*return*/, value];
                }
            });
        });
    };
    ActorStateManager.prototype.isStateMarkedForRemove = function (stateName) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateMetadata;
            return __generator(this, function (_a) {
                stateChangeTracker = this.getContextualStateTracker();
                if (stateChangeTracker.has(stateName)) {
                    stateMetadata = stateChangeTracker.get(stateName);
                    return [2 /*return*/, (stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getChangeKind()) === StateChangeKind_1.default.REMOVE];
                }
                return [2 /*return*/, false];
            });
        });
    };
    ActorStateManager.prototype.addOrUpdateState = function (stateName, value, updateValueFactory) {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateMetadata, newValue, _a, hasValue, val, newValue;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        if (stateChangeTracker.has(stateName)) {
                            stateMetadata = stateChangeTracker.get(stateName);
                            if (!stateMetadata) {
                                throw new Error("State Metadata was not set");
                            }
                            if ((stateMetadata === null || stateMetadata === void 0 ? void 0 : stateMetadata.getChangeKind()) === StateChangeKind_1.default.REMOVE) {
                                stateChangeTracker.set(stateName, new StateMetadata_1.default(value, StateChangeKind_1.default.UPDATE));
                                return [2 /*return*/, value];
                            }
                            newValue = updateValueFactory(stateName, stateMetadata.getValue());
                            stateMetadata.setValue(newValue);
                            if (stateMetadata.getChangeKind() === StateChangeKind_1.default.NONE) {
                                stateMetadata.setChangeKind(StateChangeKind_1.default.UPDATE);
                            }
                            stateChangeTracker.set(stateName, stateMetadata);
                            return [2 /*return*/, newValue];
                        }
                        return [4 /*yield*/, this.actor.getStateProvider().tryLoadState(this.actor.getActorType(), this.actor.getId().getId(), stateName)];
                    case 1:
                        _a = _b.sent(), hasValue = _a[0], val = _a[1];
                        if (hasValue) {
                            newValue = updateValueFactory(stateName, val);
                            stateChangeTracker.set(stateName, new StateMetadata_1.default(newValue, StateChangeKind_1.default.UPDATE));
                            return [2 /*return*/, newValue];
                        }
                        stateChangeTracker.set(stateName, new StateMetadata_1.default(value, StateChangeKind_1.default.ADD));
                        return [2 /*return*/, value];
                }
            });
        });
    };
    ActorStateManager.prototype.getStateNames = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateNames;
            return __generator(this, function (_a) {
                stateChangeTracker = this.getContextualStateTracker();
                stateNames = [];
                stateChangeTracker.forEach(function (val, key) {
                    if (val.getChangeKind() === StateChangeKind_1.default.ADD || val.getChangeKind() === StateChangeKind_1.default.REMOVE) {
                        stateNames.push(key);
                    }
                });
                return [2 /*return*/, stateNames];
            });
        });
    };
    ActorStateManager.prototype.clearCache = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker;
            return __generator(this, function (_a) {
                stateChangeTracker = this.getContextualStateTracker();
                stateChangeTracker.clear();
                return [2 /*return*/];
            });
        });
    };
    ActorStateManager.prototype.saveState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stateChangeTracker, stateChanges, statesToRemove, _i, statesToRemove_1, stateName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stateChangeTracker = this.getContextualStateTracker();
                        if (stateChangeTracker.size === 0) {
                            return [2 /*return*/];
                        }
                        stateChanges = [];
                        statesToRemove = [];
                        stateChangeTracker.forEach(function (stateMetadata, stateName) {
                            if (stateMetadata.getChangeKind() === StateChangeKind_1.default.NONE) {
                                return;
                            }
                            stateChanges.push(new ActorStateChange_1.default(stateName, stateMetadata.getValue(), stateMetadata.getChangeKind()));
                            if (stateMetadata.getChangeKind() === StateChangeKind_1.default.REMOVE) {
                                statesToRemove.push(stateName);
                            }
                            // Mark the state as unmodified so that tracking for next invocation is done correctly
                            stateMetadata.setChangeKind(StateChangeKind_1.default.NONE);
                        });
                        if (!(stateChanges.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.actor.getStateProvider().saveState(this.actor.getActorType(), this.actor.getId().getId(), stateChanges)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        for (_i = 0, statesToRemove_1 = statesToRemove; _i < statesToRemove_1.length; _i++) {
                            stateName = statesToRemove_1[_i];
                            stateChangeTracker.delete(stateName);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return ActorStateManager;
}());
exports.default = ActorStateManager;
