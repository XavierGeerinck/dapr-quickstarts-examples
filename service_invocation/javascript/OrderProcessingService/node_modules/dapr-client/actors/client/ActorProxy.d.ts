import { AbstractActor } from "../..";
import DaprClient from "../../implementation/Client/DaprClient";
import Class from "../../types/Class";
import ActorId from "../ActorId";
import ActorProxyFactory from "./ActorProxyFactory";
export default class ActorProxy<T extends AbstractActor> {
    readonly actorProxyFactory: ActorProxyFactory;
    readonly daprClient: DaprClient;
    readonly actorType: string;
    readonly actorId: ActorId;
    readonly actorInterface: Class<T>;
    constructor(daprClient: DaprClient, actorType: string, actorId: ActorId, actorInterface: Class<T>);
    getActorId(): ActorId;
    getActorType(): string;
    static create<T extends AbstractActor>(client: DaprClient, actorType: string, actorId: string, actorInterface: Class<T>): ActorProxy<T>;
}
