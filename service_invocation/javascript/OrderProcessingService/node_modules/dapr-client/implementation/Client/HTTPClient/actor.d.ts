import HTTPClient from './HTTPClient';
import { OperationType } from '../../../types/Operation.type';
import { ActorReminderType } from '../../../types/ActorReminder.type';
import { ActorTimerType } from '../../../types/ActorTimer.type';
import IClientActor from '../../../interfaces/Client/IClientActor';
import { KeyValueType } from '../../../types/KeyValue.type';
export default class HTTPClientActor implements IClientActor {
    client: HTTPClient;
    constructor(client: HTTPClient);
    invoke(method: "GET" | "POST" | "PUT" | "DELETE" | undefined, actorType: string, actorId: string, methodName: string, body?: any): Promise<object>;
    stateTransaction(actorType: string, actorId: string, operations: OperationType[]): Promise<void>;
    stateGet(actorType: string, actorId: string, key: string): Promise<KeyValueType | string>;
    reminderCreate(actorType: string, actorId: string, name: string, reminder: ActorReminderType): Promise<void>;
    reminderGet(actorType: string, actorId: string, name: string): Promise<object>;
    reminderDelete(actorType: string, actorId: string, name: string): Promise<void>;
    timerCreate(actorType: string, actorId: string, name: string, timer: ActorTimerType): Promise<void>;
    timerDelete(actorType: string, actorId: string, name: string): Promise<void>;
    deactivate(actorType: string, actorId: string): Promise<void>;
    getActors(): Promise<object>;
}
