"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = __importDefault(require("node-fetch"));
var __1 = require("../../..");
var HTTPClient = /** @class */ (function () {
    function HTTPClient(host, port) {
        if (host === void 0) { host = "127.0.0.1"; }
        if (port === void 0) { port = "50050"; }
        this.isInitialized = true;
        this.clientHost = host;
        this.clientPort = port;
        if (!this.clientHost.startsWith('http://') && !this.clientHost.startsWith('https://')) {
            this.clientUrl = "http://" + this.clientHost + ":" + this.clientPort + "/v1.0";
        }
        else {
            this.clientUrl = this.clientHost + ":" + this.clientPort + "/v1.0";
        }
        this.client = node_fetch_1.default;
    }
    HTTPClient.prototype.getClient = function () {
        return this.client;
    };
    HTTPClient.prototype.getClientHost = function () {
        return this.clientHost;
    };
    HTTPClient.prototype.getClientPort = function () {
        return this.clientPort;
    };
    HTTPClient.prototype.getClientUrl = function () {
        return this.clientUrl;
    };
    HTTPClient.prototype.getClientCommunicationProtocol = function () {
        return __1.CommunicationProtocolEnum.HTTP;
    };
    HTTPClient.prototype.execute = function (url, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var urlFull, res, txt, txtParsed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(params === null || params === void 0 ? void 0 : params.headers)) {
                            params.headers = {};
                        }
                        if ((params === null || params === void 0 ? void 0 : params.body) && !(params === null || params === void 0 ? void 0 : params.headers["Content-Type"])) {
                            switch (typeof (params === null || params === void 0 ? void 0 : params.body)) {
                                case "object":
                                    params.headers["Content-Type"] = "application/json";
                                    params.body = JSON.stringify(params === null || params === void 0 ? void 0 : params.body);
                                    break;
                                case "string":
                                    params.headers["Content-Type"] = "text/plain";
                                    break;
                                default:
                                    console.log("Unknown body type: " + typeof (params === null || params === void 0 ? void 0 : params.body) + ", defaulting to \"text/plain\"");
                                    params.headers["Content-Type"] = "text/plain";
                                    break;
                            }
                        }
                        urlFull = url.startsWith("http") ? url : "" + this.clientUrl + url;
                        return [4 /*yield*/, (0, node_fetch_1.default)(urlFull, params)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 2:
                        txt = _a.sent();
                        try {
                            txtParsed = JSON.parse(txt);
                        }
                        catch (e) {
                            txtParsed = txt;
                        }
                        // 2XX -> OK; 3XX -> Redirects and Found
                        if (res.status >= 200 && res.status <= 399) {
                            return [2 /*return*/, txtParsed];
                        }
                        // 400 = Bad Request, 401 = Unauthorized, 404 = Not Found
                        else if (res.status === 400 || res.status === 401 || res.status === 404) {
                            throw new Error(JSON.stringify(txtParsed));
                        }
                        // 403 = Forbidden
                        else if (res.status === 403) {
                            throw new Error(JSON.stringify(txtParsed));
                        }
                        // 500 = Internal Server Error, 502 = Bad Gateway
                        else if (res.status === 500 || res.status === 502) {
                            throw new Error(JSON.stringify(txtParsed));
                        }
                        // All the others
                        else {
                            console.log(txtParsed);
                            throw new Error(JSON.stringify({
                                error: "UNKNOWN",
                                error_msg: "An unknown problem occured and we got the status " + res.status + " with response " + res
                            }));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return HTTPClient;
}());
exports.default = HTTPClient;
