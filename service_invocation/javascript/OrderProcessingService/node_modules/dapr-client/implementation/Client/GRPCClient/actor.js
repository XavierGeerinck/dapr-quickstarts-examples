"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var empty_pb_1 = require("google-protobuf/google/protobuf/empty_pb");
var any_pb_1 = require("google-protobuf/google/protobuf/any_pb");
var dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
// https://docs.dapr.io/reference/api/actors_api/
var GRPCClientActor = /** @class */ (function () {
    function GRPCClientActor(client) {
        this.client = client;
    }
    GRPCClientActor.prototype.invoke = function (method, actorType, actorId, methodName, body) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.InvokeActorRequest();
                msgService.setActorId(actorId);
                msgService.setActorType(actorType);
                msgService.setMethod(methodName);
                if (body) {
                    // @todo: if body is any, do we have to figure out how to serialize in JS? (e.g. if object -> JSON.stringify?)
                    msgService.setData(body);
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.invokeActor(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/secrets_api/#response-body
                            var resData = Buffer.from(res.getData()).toString();
                            try {
                                return resolve(JSON.parse(resData));
                            }
                            catch (e) {
                                return resolve(resData);
                            }
                        });
                    })];
            });
        });
    };
    GRPCClientActor.prototype.stateTransaction = function (actorType, actorId, operations) {
        return __awaiter(this, void 0, void 0, function () {
            var transactionItems, _i, operations_1, o, transactionItem, msgSerialized, msgService;
            var _this = this;
            return __generator(this, function (_a) {
                transactionItems = [];
                for (_i = 0, operations_1 = operations; _i < operations_1.length; _i++) {
                    o = operations_1[_i];
                    transactionItem = new dapr_pb_1.TransactionalActorStateOperation();
                    transactionItem.setKey(o.request.key);
                    transactionItem.setOperationtype(o.operation);
                    msgSerialized = new any_pb_1.Any();
                    msgSerialized.setValue(Buffer.from("" + o.request.value, "utf-8"));
                    transactionItem.setValue(msgSerialized);
                    transactionItems.push(transactionItem);
                }
                msgService = new dapr_pb_1.ExecuteActorStateTransactionRequest();
                msgService.setActorType(actorType);
                msgService.setActorId(actorId);
                msgService.setOperationsList(transactionItems);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.executeActorStateTransaction(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/state_api/#request-body-1
                            return resolve();
                        });
                    })];
            });
        });
    };
    GRPCClientActor.prototype.stateGet = function (actorType, actorId, key) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.GetActorStateRequest();
                msgService.setActorType(actorType);
                msgService.setActorId(actorId);
                msgService.setKey(key);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.getActorState(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-2
                            var resData = Buffer.from(res.getData()).toString();
                            try {
                                var json = JSON.parse(resData);
                                return resolve(json);
                            }
                            catch (e) {
                                return resolve(resData);
                            }
                        });
                    })];
            });
        });
    };
    GRPCClientActor.prototype.reminderCreate = function (actorType, actorId, name, reminder) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.RegisterActorReminderRequest();
                msgService.setActorType(actorType);
                msgService.setActorId(actorId);
                msgService.setName(name);
                if (reminder.data) {
                    msgService.setData(Buffer.from(reminder === null || reminder === void 0 ? void 0 : reminder.data.toString(), "utf-8"));
                }
                if (reminder.period) {
                    msgService.setPeriod(reminder.period.toString());
                }
                if (reminder.dueTime) {
                    msgService.setDueTime(reminder.dueTime.toString());
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.registerActorReminder(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-3
                            return resolve();
                        });
                    })];
            });
        });
    };
    // @todo: not implemented, cannot find the gRPC bindings
    // async reminderGet(actorType: string, actorId: string, name: string): Promise<void> {
    //     const msgService = new RegisterActorReminderRequest();
    //     msgService.setActorType(actorType);
    //     msgService.setActorId(actorId);
    //     msgService.setName(name);
    //     if (reminder.data) {
    //         msgService.setData(Buffer.from(reminder.data, "utf-8"))
    //     }
    //     if (reminder.period) {
    //         msgService.setPeriod(reminder.period);
    //     }
    //     if (reminder.dueTime) {
    //         msgService.setDueTime(reminder.dueTime);
    //     }
    //     return new Promise(async (resolve, reject) => {
    //         const client = await GRPCClientSingleton.getClient();
    //         client.registerActorReminder(msgService, (err, res) => {
    //             if (err) {
    //                 return reject(err);
    //             }
    //             // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-3
    //             return resolve();
    //         });
    //     });
    // }
    GRPCClientActor.prototype.reminderDelete = function (actorType, actorId, name) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.UnregisterActorReminderRequest();
                msgService.setActorType(actorType);
                msgService.setActorId(actorId);
                msgService.setName(name);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.unregisterActorReminder(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/actors_api/#delete-actor-reminder
                            return resolve();
                        });
                    })];
            });
        });
    };
    GRPCClientActor.prototype.timerCreate = function (actorType, actorId, name, timer) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.RegisterActorTimerRequest();
                msgService.setActorType(actorType);
                msgService.setActorId(actorId);
                msgService.setName(name);
                if (timer.callback) {
                    msgService.setCallback(timer.callback);
                }
                if (timer.data) {
                    msgService.setData(Buffer.from(timer.data, "utf-8"));
                }
                if (timer.period) {
                    msgService.setPeriod(timer.period.toString());
                }
                if (timer.dueTime) {
                    msgService.setDueTime(timer.dueTime.toString());
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.registerActorTimer(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-3
                            return resolve();
                        });
                    })];
            });
        });
    };
    GRPCClientActor.prototype.timerDelete = function (actorType, actorId, name) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.UnregisterActorTimerRequest();
                msgService.setActorType(actorType);
                msgService.setActorId(actorId);
                msgService.setName(name);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.unregisterActorTimer(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/actors_api/#delete-actor-timer
                            return resolve();
                        });
                    })];
            });
        });
    };
    // @todo: cannot find this one
    // async deactivate(actorType: string, actorId: string): Promise<ResActorDeactivateDto> {
    //     const msgService = new UnregisterActorTimerRequest();
    //     msgService.setActorType(actorType);
    //     msgService.setActorId(actorId);
    //     msgService.setName(name);
    //     return new Promise(async (resolve, reject) => {
    //         const client = await GRPCClientSingleton.getClient();
    //         client.unregisterActorTimer(msgService, (err, res) => {
    //             if (err) {
    //                 return reject(err);
    //             }
    //             // https://docs.dapr.io/reference/api/actors_api/#delete-actor-timer
    //             return resolve();
    //         });
    //     });
    // }
    GRPCClientActor.prototype.getActors = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.getMetadata(new empty_pb_1.Empty(), function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-2
                            return resolve(res.getActiveActorsCountList());
                        });
                    })];
            });
        });
    };
    return GRPCClientActor;
}());
exports.default = GRPCClientActor;
