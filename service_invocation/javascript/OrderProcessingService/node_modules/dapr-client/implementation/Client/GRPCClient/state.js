"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
var common_pb_1 = require("../../../proto/dapr/proto/common/v1/common_pb");
// https://docs.dapr.io/reference/api/state_api/
var GRPCClientState = /** @class */ (function () {
    function GRPCClientState(client) {
        this.client = client;
    }
    GRPCClientState.prototype.save = function (storeName, stateObjects) {
        return __awaiter(this, void 0, void 0, function () {
            var stateList, _i, stateObjects_1, stateObject, si, msgService;
            var _this = this;
            return __generator(this, function (_a) {
                stateList = [];
                for (_i = 0, stateObjects_1 = stateObjects; _i < stateObjects_1.length; _i++) {
                    stateObject = stateObjects_1[_i];
                    si = new common_pb_1.StateItem();
                    si.setKey(stateObject.key);
                    si.setValue(Buffer.from(typeof stateObject.value === "object" ? JSON.stringify(stateObject.value) : stateObject.value.toString(), "utf-8"));
                    stateList.push(si);
                }
                msgService = new dapr_pb_1.SaveStateRequest();
                msgService.setStoreName(storeName);
                msgService.setStatesList(stateList);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.saveState(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/state_api/#response-body
                            return resolve();
                        });
                    })];
            });
        });
    };
    GRPCClientState.prototype.get = function (storeName, key) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.GetStateRequest();
                msgService.setStoreName(storeName);
                msgService.setKey(key);
                // @todo: https://docs.dapr.io/reference/api/state_api/#optional-behaviors
                // msgService.setConsistency()
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.getState(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/state_api/#http-response-1
                            var resData = Buffer.from(res.getData()).toString();
                            try {
                                var json = JSON.parse(resData);
                                return resolve(json);
                            }
                            catch (e) {
                                return resolve(resData);
                            }
                        });
                    })];
            });
        });
    };
    GRPCClientState.prototype.getBulk = function (storeName, keys, parallelism, metadata) {
        if (parallelism === void 0) { parallelism = 10; }
        if (metadata === void 0) { metadata = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.GetBulkStateRequest();
                msgService.setStoreName(storeName);
                msgService.setKeysList(keys);
                msgService.setParallelism(parallelism);
                // @todo: https://docs.dapr.io/reference/api/state_api/#optional-behaviors
                // msgService.setConsistency()
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.getBulkState(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/state_api/#http-response-2
                            var items = res.getItemsList();
                            return resolve(items.map(function (i) {
                                var resDataStr = Buffer.from(i.getData()).toString();
                                var data;
                                try {
                                    data = JSON.parse(resDataStr);
                                }
                                catch (e) {
                                    data = resDataStr;
                                }
                                return {
                                    key: i.getKey(),
                                    data: data,
                                    etag: i.getEtag()
                                };
                            }));
                        });
                    })];
            });
        });
    };
    GRPCClientState.prototype.delete = function (storeName, key) {
        return __awaiter(this, void 0, void 0, function () {
            var msgService;
            var _this = this;
            return __generator(this, function (_a) {
                msgService = new dapr_pb_1.DeleteStateRequest();
                msgService.setStoreName(storeName);
                msgService.setKey(key);
                // @todo: implement below
                // msgService.setEtag();
                // msgService.setOptions();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.deleteState(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/state_api/#http-response-3
                            return resolve();
                        });
                    })];
            });
        });
    };
    GRPCClientState.prototype.transaction = function (storeName, operations, metadata) {
        if (operations === void 0) { operations = []; }
        if (metadata === void 0) { metadata = null; }
        return __awaiter(this, void 0, void 0, function () {
            var transactionItems, _i, operations_1, o, si, etag, so, transactionItem, msgService;
            var _this = this;
            return __generator(this, function (_a) {
                transactionItems = [];
                for (_i = 0, operations_1 = operations; _i < operations_1.length; _i++) {
                    o = operations_1[_i];
                    si = new common_pb_1.StateItem();
                    si.setKey(o.request.key);
                    si.setValue(Buffer.from(o.request.value || "", "utf-8"));
                    if (o.request.etag) {
                        etag = new common_pb_1.Etag();
                        etag.setValue(o.request.etag.toString());
                        si.setEtag(etag);
                    }
                    if (o.request.options) {
                        so = new common_pb_1.StateOptions();
                        so.setConsistency(o.request.options.consistency);
                        so.setConcurrency(o.request.options.concurrency);
                        si.setOptions(so);
                    }
                    transactionItem = new dapr_pb_1.TransactionalStateOperation();
                    transactionItem.setOperationtype(o.operation);
                    transactionItem.setRequest(si);
                    transactionItems.push(transactionItem);
                }
                msgService = new dapr_pb_1.ExecuteStateTransactionRequest();
                msgService.setStorename(storeName);
                msgService.setOperationsList(transactionItems);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var client = _this.client.getClient();
                        client.executeStateTransaction(msgService, function (err, res) {
                            if (err) {
                                return reject(err);
                            }
                            // https://docs.dapr.io/reference/api/state_api/#request-body-1
                            return resolve();
                        });
                    })];
            });
        });
    };
    return GRPCClientState;
}());
exports.default = GRPCClientState;
