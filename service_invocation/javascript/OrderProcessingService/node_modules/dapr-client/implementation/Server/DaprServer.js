"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var CommunicationProtocol_enum_1 = __importDefault(require("../../enum/CommunicationProtocol.enum"));
var GRPCServer_1 = __importDefault(require("./GRPCServer/GRPCServer"));
var pubsub_1 = __importDefault(require("./GRPCServer/pubsub"));
var binding_1 = __importDefault(require("./GRPCServer/binding"));
var invoker_1 = __importDefault(require("./GRPCServer/invoker"));
var actor_1 = __importDefault(require("./GRPCServer/actor"));
var HTTPServer_1 = __importDefault(require("./HTTPServer/HTTPServer"));
var pubsub_2 = __importDefault(require("./HTTPServer/pubsub"));
var binding_2 = __importDefault(require("./HTTPServer/binding"));
var invoker_2 = __importDefault(require("./HTTPServer/invoker"));
var actor_2 = __importDefault(require("./HTTPServer/actor"));
var GRPCClient_1 = __importDefault(require("../Client/GRPCClient/GRPCClient"));
var HTTPClient_1 = __importDefault(require("../Client/HTTPClient/HTTPClient"));
var DaprServer = /** @class */ (function () {
    function DaprServer(serverHost, serverPort, daprHost, daprPort, communicationProtocol) {
        if (serverHost === void 0) { serverHost = "127.0.0.1"; }
        if (serverPort === void 0) { serverPort = process.env.DAPR_SERVER_PORT || "50050"; }
        if (daprHost === void 0) { daprHost = "127.0.0.1"; }
        if (daprPort === void 0) { daprPort = "50051"; }
        if (communicationProtocol === void 0) { communicationProtocol = CommunicationProtocol_enum_1.default.HTTP; }
        this.serverHost = serverHost;
        this.serverPort = serverPort;
        this.daprHost = daprHost;
        this.daprPort = daprPort;
        this.communicationProtocol = communicationProtocol;
        // If DAPR_SERVER_PORT was not set, we set it
        process.env.DAPR_SERVER_PORT = this.serverPort;
        process.env.DAPR_CLIENT_PORT = this.daprPort;
        // Validation on port
        if (!/^[0-9]+$/.test(this.serverPort)) {
            throw new Error('DAPR_SERVER_INCORRECT_SERVER_PORT');
        }
        if (!/^[0-9]+$/.test(this.daprPort)) {
            throw new Error('DAPR_SERVER_INCORRECT_SIDECAR_PORT');
        }
        // Builder
        switch (communicationProtocol) {
            case CommunicationProtocol_enum_1.default.GRPC: {
                var client = new GRPCClient_1.default(daprHost, daprPort);
                var server = new GRPCServer_1.default();
                this.daprServer = server;
                this.pubsub = new pubsub_1.default(server, client);
                this.binding = new binding_1.default(server, client);
                this.invoker = new invoker_1.default(server, client);
                this.actor = new actor_1.default(server, client);
                break;
            }
            case CommunicationProtocol_enum_1.default.HTTP:
            default: {
                var client = new HTTPClient_1.default(daprHost, daprPort);
                var server = new HTTPServer_1.default();
                this.daprServer = server;
                this.pubsub = new pubsub_2.default(server, client);
                this.binding = new binding_2.default(server, client);
                this.invoker = new invoker_2.default(server, client);
                this.actor = new actor_2.default(server, client);
                break;
            }
        }
    }
    DaprServer.prototype.startServer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.daprServer.startServer(this.serverHost, this.serverPort.toString())];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DaprServer.prototype.getDaprClient = function () {
        return this.daprServer;
    };
    DaprServer.prototype.getDaprHost = function () {
        return this.daprHost;
    };
    DaprServer.prototype.getDaprPort = function () {
        return this.daprPort;
    };
    return DaprServer;
}());
exports.default = DaprServer;
