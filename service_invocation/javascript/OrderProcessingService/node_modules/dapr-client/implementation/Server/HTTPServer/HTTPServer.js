"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var restana_1 = __importDefault(require("restana"));
var body_parser_1 = __importDefault(require("body-parser"));
var HTTPServerImpl_1 = __importDefault(require("./HTTPServerImpl"));
var NodeJSUtils = __importStar(require("../../../utils/NodeJS.util"));
var HTTPServer = /** @class */ (function () {
    function HTTPServer() {
        this.serverStartupDelay = 250;
        this.serverHost = "";
        this.serverPort = "";
        this.isInitialized = false;
        this.server = (0, restana_1.default)();
        this.server.use(body_parser_1.default.text());
        this.server.use(body_parser_1.default.raw());
        this.server.use(body_parser_1.default.json({
            type: [
                "application/json",
                // Support cloudevents 
                // https://github.com/cloudevents/spec/blob/v1.0.1/json-format.md
                "application/cloudevents+json",
                "application/*+json",
            ]
        }));
        // body-parser is not async compatible, so we have to make it
        // this.server.use((req, res, next) => {
        //     return new Promise(resolve => {
        //         bodyParser.json()(req, res, (err) => {
        //             return resolve(next(err))
        //         })
        //     })
        // })
        this.serverImpl = new HTTPServerImpl_1.default();
        this.serverAddress = "";
    }
    HTTPServer.prototype.getServerAddress = function () {
        if (!this.isInitialized) {
            throw new Error(JSON.stringify({
                error: "HTTP_SERVER_NOT_INITIALIZED",
                error_message: "The HTTP server was not initialized, did you call `await HTTPServerSingleton.initialize()`?"
            }));
        }
        return this.serverAddress;
    };
    HTTPServer.prototype.getServer = function () {
        return this.server;
    };
    HTTPServer.prototype.getServerPort = function () {
        return this.serverPort;
    };
    HTTPServer.prototype.getServerHost = function () {
        return this.serverHost;
    };
    // We allow this, since this will register the routes and handlers!
    HTTPServer.prototype.getServerImpl = function () {
        return this.serverImpl;
    };
    HTTPServer.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isInitialized) {
                            throw new Error(JSON.stringify({
                                error: "HTTP_SERVER_NOT_INITIALIZED",
                                error_message: "The HTTP server was not initialized, did you call `await HTTPServerSingleton.initialize()`?"
                            }));
                        }
                        return [4 /*yield*/, this.server.close()];
                    case 1:
                        _a.sent();
                        this.isInitialized = false;
                        console.log("[Dapr-JS] Closed Server");
                        return [2 /*return*/];
                }
            });
        });
    };
    HTTPServer.prototype.startServer = function (host, port) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.serverHost = host;
                        this.serverPort = port;
                        // Initialize Server Listener
                        return [4 /*yield*/, this.server.start(parseInt(port, 10))];
                    case 1:
                        // Initialize Server Listener
                        _a.sent();
                        console.log("[Dapr-JS] Listening on " + port);
                        this.serverAddress = "http://" + host + ":" + port;
                        // Add PubSub Routes
                        console.log("[Dapr API][PubSub] Registering " + this.serverImpl.pubSubSubscriptionRoutes.length + " PubSub Subscriptions");
                        this.server.get('/dapr/subscribe', function (req, res) {
                            res.send(_this.serverImpl.pubSubSubscriptionRoutes);
                            console.log("[Dapr API][PubSub] Registered " + _this.serverImpl.pubSubSubscriptionRoutes.length + " PubSub Subscriptions");
                        });
                        // We need to call the Singleton to start listening on the port, else Dapr will not pick it up correctly
                        // Dapr will probe every 50ms to see if we are listening on our port: https://github.com/dapr/dapr/blob/a43712c97ead550ca2f733e9f7e7769ecb195d8b/pkg/runtime/runtime.go#L1694
                        // if we are using actors we will change this to 4s to let the placement tables update
                        console.log("Letting Dapr pick-up the server (" + this.serverStartupDelay + "ms)");
                        return [4 /*yield*/, NodeJSUtils.sleep(this.serverStartupDelay)];
                    case 2:
                        _a.sent();
                        // We are initialized
                        this.isInitialized = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    return HTTPServer;
}());
exports.default = HTTPServer;
