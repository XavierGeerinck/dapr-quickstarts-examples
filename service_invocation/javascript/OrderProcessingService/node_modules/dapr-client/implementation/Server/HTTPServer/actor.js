"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ActorRuntime_1 = __importDefault(require("../../../actors/runtime/ActorRuntime"));
var BufferSerializer_1 = __importDefault(require("../../../actors/runtime/BufferSerializer"));
// https://docs.dapr.io/reference/api/bindings_api/
var HTTPServerActor = /** @class */ (function () {
    function HTTPServerActor(server, client) {
        this.client = client;
        this.server = server;
        this.serializer = new BufferSerializer_1.default();
    }
    HTTPServerActor.prototype.deactivateActor = function (actorType, actorId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.execute("http://localhost:" + this.server.serverPort + "/actors/" + actorType + "/" + actorId, { method: "DELETE" })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HTTPServerActor.prototype.registerActor = function (cls) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                ActorRuntime_1.default.getInstance(this.client).registerActor(cls);
                return [2 /*return*/];
            });
        });
    };
    HTTPServerActor.prototype.getRegisteredActors = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, ActorRuntime_1.default.getInstance(this.client).getRegisteredActorTypes()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Initialize actors in the HTTP Server
     * This will create the routes that get invoked by the Dapr Sidecar
     */
    HTTPServerActor.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Change the server startupDelay to 3s since we want the placement tables to get updated correctly
                // @todo: is there a better way to detect this?
                this.server.serverStartupDelay = 4000;
                console.log("[Actors] Initializing, changing startup delay to 4s to allow for placement tables to propagate");
                // Probes the application for a response to state that the app is healthy and running
                // https://docs.dapr.io/reference/api/actors_api/#health-check
                this.server.getServer().get("/healthz", this.handlerHealth.bind(this));
                // https://docs.dapr.io/reference/api/actors_api/#get-registered-actors
                this.server.getServer().get("/dapr/config", this.handlerConfig.bind(this));
                this.server.getServer().delete("/actors/:actorTypeName/:actorId", this.handlerDeactivate.bind(this));
                this.server.getServer().put("/actors/:actorTypeName/:actorId/method/:methodName", this.handlerMethod.bind(this));
                this.server.getServer().put("/actors/:actorTypeName/:actorId/method/timer/:timerName", this.handlerTimer.bind(this));
                this.server.getServer().put("/actors/:actorTypeName/:actorId/method/remind/:reminderName", this.handlerReminder.bind(this));
                return [2 /*return*/];
            });
        });
    };
    HTTPServerActor.prototype.handlerHealth = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, res.send("ok")];
            });
        });
    };
    HTTPServerActor.prototype.handlerConfig = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            var actorRuntime, result;
            return __generator(this, function (_a) {
                actorRuntime = ActorRuntime_1.default.getInstance(this.client);
                result = __assign({ entities: actorRuntime.getRegisteredActorTypes() }, actorRuntime.getActorRuntimeConfig().toDictionary());
                return [2 /*return*/, res.send(result)];
            });
        });
    };
    HTTPServerActor.prototype.handlerDeactivate = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, actorTypeName, actorId, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = req.params, actorTypeName = _a.actorTypeName, actorId = _a.actorId;
                        return [4 /*yield*/, ActorRuntime_1.default.getInstance(this.client).deactivate(actorTypeName, actorId)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, this.handleResult(res, result)];
                }
            });
        });
    };
    HTTPServerActor.prototype.handlerMethod = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, actorTypeName, actorId, methodName, body, dataSerialized, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = req.params, actorTypeName = _a.actorTypeName, actorId = _a.actorId, methodName = _a.methodName;
                        body = req.body;
                        dataSerialized = this.serializer.serialize(body);
                        return [4 /*yield*/, ActorRuntime_1.default.getInstance(this.client).invoke(actorTypeName, actorId, methodName, dataSerialized)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, this.handleResult(res, result)];
                }
            });
        });
    };
    HTTPServerActor.prototype.handlerTimer = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, actorTypeName, actorId, timerName, body, dataSerialized, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = req.params, actorTypeName = _a.actorTypeName, actorId = _a.actorId, timerName = _a.timerName;
                        body = req.body;
                        dataSerialized = this.serializer.serialize(body);
                        return [4 /*yield*/, ActorRuntime_1.default.getInstance(this.client).fireTimer(actorTypeName, actorId, timerName, dataSerialized)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, res.send(result, 200)];
                }
            });
        });
    };
    HTTPServerActor.prototype.handlerReminder = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, actorTypeName, actorId, reminderName, body, dataSerialized, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = req.params, actorTypeName = _a.actorTypeName, actorId = _a.actorId, reminderName = _a.reminderName;
                        body = req.body;
                        dataSerialized = this.serializer.serialize(body);
                        return [4 /*yield*/, ActorRuntime_1.default.getInstance(this.client).fireReminder(actorTypeName, actorId, reminderName, dataSerialized)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, res.send(result, 200)];
                }
            });
        });
    };
    HTTPServerActor.prototype.handleResult = function (res, result) {
        if (result && typeof result === "object") {
            return res.send(result, 200);
        }
        else {
            // @ts-ignore
            return res.send("" + result, 200);
        }
    };
    return HTTPServerActor;
}());
exports.default = HTTPServerActor;
